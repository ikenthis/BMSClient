// HeatMapVisualization.ts - CORREGIDO: Sin auto-generaci√≥n de colores Y SIN ETIQUETAS
"use client";

import * as THREE from 'three';
import * as FRAGS from '@thatopen/fragments';
import * as OBC from '@thatopen/components';

export interface HeatMapData {
  spaceGuid: string;
  spaceName: string;
  temperature: number;
  humidity?: number;
  occupancy?: number;
  airQuality?: number;
  timestamp: string;
  quality: 'good' | 'warning' | 'critical' | 'error';
}

export interface HeatMapVisualizationConfig {
  temperatureRange: {
    min: number;      
    max: number;      
    optimal: {
      min: number;    
      max: number;    
    };
  };
  colorScheme: {
    cold: string;     
    cool: string;     
    optimal: string;  
    warm: string;     
    hot: string;      
    noData: string;   
  };
  opacity: number;
  updateInterval: number;
  animateTransitions: boolean;
  isolateSpaces: boolean;
}

// üî• TODAS las categor√≠as IFC - completa
const IFC_CATEGORIES = [
  "IFCWALL", "IFCSLAB", "IFCBEAM", "IFCCOLUMN", "IFCDOOR", "IFCWINDOW", 
  "IFCROOF", "IFCSTAIR", "IFCRAILING", "IFCFURNISHINGELEMENT", "IFCCURTAINWALL",
  "IFCPLATE", "IFCMEMBER", "IFCBUILDINGELEMENTPROXY", "IFCFLOWFITTING", 
  "IFCFLOWSEGMENT", "IFCFLOWTERMINAL", "IFCBUILDING", "IFCSPACE", "IFCSITE",
  "IFCPROJECT", "IFCBUILDINGSTOREY", "IFCFOOTING", "IFCPILE", "IFCCOVERING", "IFCSENSOR", "IFCSTAIRFLIGHT", 
  "IFGRID", "IFCMATERIAL","IFCMATERIAL", "IFCMATERIALLAYER", "IFCMPROPERTYSET", "IFCWALLSTANDARDCASE",
];

class HeatMapVisualizationService {
  private world: OBC.World | null = null;
  private fragments: FRAGS.FragmentsModels | null = null;
  private isActive: boolean = false;
  private heatMapData: Map<string, HeatMapData> = new Map();
  private activeSpaceHighlights: Map<string, { model: FRAGS.FragmentsModel; localIds: number[] }> = new Map();
  private updateTimer: number | null = null;

  // ‚≠ê MAPAS DE CORRESPONDENCIA
  private guidToLocalIdMap: Map<string, { model: FRAGS.FragmentsModel; localId: number }> = new Map();
  
  // üî• NUEVO: Mapa de centros de espacios
  private spaceCentersMap: Map<string, THREE.Vector3> = new Map();

  // üî• Para gesti√≥n de visibilidad
  private hiddenElements: Map<string, { model: FRAGS.FragmentsModel; localIds: number[]; category: string }> = new Map();
  private spaceElements: Map<string, { model: FRAGS.FragmentsModel; localIds: number[] }> = new Map();

  // üî• BATCH PROCESSING - MODIFICADO: Solo almacenar datos, no procesar autom√°ticamente
  private pendingData: HeatMapData[] = [];
  private batchTimeout: NodeJS.Timeout | null = null;
  private isProcessing = false;

  private config: HeatMapVisualizationConfig = {
    temperatureRange: {
      min: 15,    
      max: 32,    
      optimal: {
        min: 20,  
        max: 24,  
      }
    },
    colorScheme: {
      cold: '#0066ff',     
      cool: '#00aaff',     
      optimal: '#00ff00',  
      warm: '#ffaa00',     
      hot: '#ff0000',      
      noData: '#666666'    
    },
    opacity: 0.8,
    updateInterval: 5000,
    animateTransitions: true,
    isolateSpaces: true
  };

  /**
   * ‚≠ê INICIALIZACI√ìN MEJORADA
   */
  async initialize(world: OBC.World, fragments: FRAGS.FragmentsModels): Promise<void> {
    console.log('üî• === INICIALIZANDO HEATMAP VISUALIZATION ===');
    this.world = world;
    this.fragments = fragments;
    
    // Construir mapas de correspondencia SOLAMENTE - NO aplicar visualizaci√≥n
    await this.buildGuidToLocalIdMap();
    await this.buildElementMaps();
    await this.buildSpaceCentersMap();
    
    console.log('‚úÖ HeatMapVisualization inicializado - ESPERANDO ACTIVACI√ìN MANUAL');
  }

  /**
 * üî• FUNCI√ìN SIMPLE: Obtener solo habitaciones (sin √°reas)
 */
private async getFilteredSpaces(model: FRAGS.FragmentsModel): Promise<{ localId: number; guid: string; name: string }[]> {
  const categories = await model.getCategories();
  if (!categories.includes('IFCSPACE')) return [];
  
  const allSpaces = await model.getItemsOfCategory('IFCSPACE');
  const filteredSpaces: { localId: number; guid: string; name: string }[] = [];
  
  for (const space of allSpaces) {
    try {
      const localId = await space.getLocalId();
      if (localId === null) continue;
      
      const guid = await space.getGuid();
      if (!guid) continue;
      
      // Obtener propiedades para verificar el nombre
      const itemsData = await model.getItemsData([localId], {
        includeGeometry: false,
        includeMaterials: false,
        includeProperties: true
      });
      
      if (itemsData && itemsData.length > 0) {
        const name = this.extractPropertyValue(itemsData[0], 'Name') || '';
        
        // FILTRO SIMPLE: Si empieza con "√Årea:", saltarlo
        if (name.startsWith('√Årea:')) {
          console.log(`üö´ Excluido √°rea: ${name}`);
          continue;
        }
        
        console.log(`‚úÖ Incluida habitaci√≥n: ${name}`);
        filteredSpaces.push({ localId, guid, name });
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error filtrando espacio:', error);
    }
  }
  
  return filteredSpaces;
}

  /**
 * Funci√≥n auxiliar para extraer propiedades IFC
 */
private extractPropertyValue(data: any, propertyName: string): string {
  if (!data) return '';
  
  if (data[propertyName] !== undefined) {
    const prop = data[propertyName];
    if (typeof prop === 'object' && prop && prop.type === 'IFCLABEL' && prop.value !== undefined) {
      return prop.value;
    }
    if (typeof prop !== 'object' || prop === null) {
      return String(prop);
    }
  }
  
  if (data.properties && data.properties[propertyName] !== undefined) {
    const prop = data.properties[propertyName];
    if (typeof prop === 'object' && prop && prop.value !== undefined) {
      return typeof prop.value === 'string' ? prop.value : String(prop.value);
    }
    if (typeof prop !== 'object' || prop === null) {
      return String(prop);
    }
  }
  
  return '';
}

/**
 * ‚≠ê CONSTRUIR MAPA GUID ‚Üí LocalID CON FILTRO DE HABITACIONES
 */
private async buildGuidToLocalIdMap(): Promise<void> {
  if (!this.fragments) return;
  
  console.log('üó∫Ô∏è Construyendo mapa GUID ‚Üí LocalID (solo habitaciones)...');
  this.guidToLocalIdMap.clear();
  let totalSpaces = 0;
  let totalRooms = 0;
  let excludedAreas = 0;
  
  for (const model of this.fragments.models.list.values()) {
    try {
      const categories = await model.getCategories();
      if (!categories.includes('IFCSPACE')) continue;
      
      const spaces = await model.getItemsOfCategory('IFCSPACE');
      console.log(`üè† Analizando ${spaces.length} espacios en modelo ${model.modelId}`);
      totalSpaces += spaces.length;
      
      for (const space of spaces) {
        try {
          const localId = await space.getLocalId();
          if (localId === null) continue;
          
          const guid = await space.getGuid();
          if (!guid) continue;
          
          // FILTRO: Obtener propiedades para verificar si es un √°rea
          const itemsData = await model.getItemsData([localId], {
            includeGeometry: false,
            includeMaterials: false,
            includeProperties: true
          });
          
          if (itemsData && itemsData.length > 0) {
            const data = itemsData[0];
            // Extraer nombre y verificar filtro
            const name = this.extractPropertyValue(data, 'Name') || '';
            
            // FILTRO: Excluir √°reas que empiecen con "√Årea:"
            if (name.startsWith('√Årea:')) {
              console.log(`üö´ Excluido √°rea del HeatMap: ${name} (ID: ${localId})`);
              excludedAreas++;
              continue; // Saltar este elemento
            }
            
            // Si llegamos aqu√≠, es una habitaci√≥n - incluirla
            console.log(`‚úÖ Incluida habitaci√≥n: ${name} (ID: ${localId})`);
            totalRooms++;
          }
          
          this.guidToLocalIdMap.set(guid, { model, localId });
          
        } catch (spaceError) {
          console.warn('‚ö†Ô∏è Error procesando espacio:', spaceError);
        }
      }
    } catch (modelError) {
      console.warn(`‚ö†Ô∏è Error procesando modelo ${model.modelId}:`, modelError);
    }
  }
  
  console.log(`‚úÖ === MAPA GUID‚ÜíLocalID CONSTRUIDO CON FILTRO ===`);
  console.log(`üè† Total espacios encontrados: ${totalSpaces}`);
  console.log(`‚úÖ Habitaciones incluidas: ${totalRooms}`);
  console.log(`üö´ √Åreas excluidas: ${excludedAreas}`);
  console.log(`üó∫Ô∏è Espacios mapeados finales: ${this.guidToLocalIdMap.size}`);
}

  /**
   * üî• NUEVO: Construir mapa de centros de espacios
   */
  private async buildSpaceCentersMap(): Promise<void> {
    if (!this.fragments) return;
    
    console.log('üìç === CONSTRUYENDO MAPA DE CENTROS DE ESPACIOS ===');
    this.spaceCentersMap.clear();
    
    for (const model of this.fragments.models.list.values()) {
      try {
        const categories = await model.getCategories();
        if (!categories.includes('IFCSPACE')) continue;
        
        const spaces = await model.getItemsOfCategory('IFCSPACE');
        
        for (const space of spaces) {
          try {
            const guid = await space.getGuid();
            if (!guid) continue;
            
            const localId = await space.getLocalId();
            if (localId === null) continue;
            
            // üî• CALCULAR CENTRO DEL ESPACIO
            const center = await this.calculateSpaceCenter(model, localId);
            if (center) {
              this.spaceCentersMap.set(guid, center);
              console.log(`üìç Centro calculado para espacio ${guid.slice(-8)}: (${center.x.toFixed(2)}, ${center.y.toFixed(2)}, ${center.z.toFixed(2)})`);
            }
            
          } catch (error) {
            console.warn('‚ö†Ô∏è Error calculando centro del espacio:', error);
          }
        }
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error procesando centros del modelo ${model.modelId}:`, error);
      }
    }
    
    console.log(`‚úÖ Centros de espacios calculados: ${this.spaceCentersMap.size}`);
  }

  /**
   * üî• NUEVO: Calcular centro geom√©trico de un espacio
   */
  private async calculateSpaceCenter(model: FRAGS.FragmentsModel, localId: number): Promise<THREE.Vector3 | null> {
    try {
      // Obtener la geometr√≠a del espacio
      const geometryInfo = await model.getGeometry(localId);
      if (!geometryInfo) return null;
      
      // Calcular bounding box
      const box = new THREE.Box3();
      
      // Si es una geometr√≠a de BufferGeometry
      if (geometryInfo.geometry && geometryInfo.geometry.attributes && geometryInfo.geometry.attributes.position) {
        const positions = geometryInfo.geometry.attributes.position.array;
        
        for (let i = 0; i < positions.length; i += 3) {
          const point = new THREE.Vector3(positions[i], positions[i + 1], positions[i + 2]);
          
          // Aplicar transformaci√≥n si existe
          if (geometryInfo.transform) {
            point.applyMatrix4(geometryInfo.transform);
          }
          
          box.expandByPoint(point);
        }
      }
      
      // Si no se pudo calcular el bounding box, usar m√©todo alternativo
      if (box.isEmpty()) {
        return await this.calculateSpaceCenterAlternative(model, localId);
      }
      
      // Calcular centro
      const center = new THREE.Vector3();
      box.getCenter(center);
      
      return center;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error calculando centro para LocalID ${localId}:`, error);
      return await this.calculateSpaceCenterAlternative(model, localId);
    }
  }

  /**
   * üî• NUEVO: M√©todo alternativo para calcular centro de espacio
   */
  private async calculateSpaceCenterAlternative(model: FRAGS.FragmentsModel, localId: number): Promise<THREE.Vector3 | null> {
    try {
      // Usar informaci√≥n de las propiedades IFC si est√° disponible
      const properties = await model.getAllPropertiesOfItem(localId);
      
      // Buscar propiedades de ubicaci√≥n o geometr√≠a
      if (properties && properties.GlobalId) {
        // Si no hay propiedades espec√≠ficas, usar un centro por defecto
        // basado en el modelo o fragmento
        const modelBounds = model.boundingBox;
        if (modelBounds) {
          const center = new THREE.Vector3();
          modelBounds.getCenter(center);
          // Elevar un poco el centro para las etiquetas
          center.y += 2;
          return center;
        }
      }
      
      // √öltimo recurso: origen con peque√±o offset
      return new THREE.Vector3(0, 3, 0);
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error en m√©todo alternativo de centro:`, error);
      return new THREE.Vector3(0, 3, 0);
    }
  }

  /**
   * üî• MEJORADO: Construir mapas de elementos por categor√≠a con mejor logging
   */
  private async buildElementMaps(): Promise<void> {
    if (!this.fragments) return;
    
    console.log('üó∫Ô∏è === CONSTRUYENDO MAPAS DE ELEMENTOS MEJORADOS ===');
    this.spaceElements.clear();
    
    let totalSpacesMapped = 0;
    
    for (const model of this.fragments.models.list.values()) {
      try {
        console.log(`üèóÔ∏è Analizando modelo: ${model.modelId}`);
        const categories = await model.getCategories();
        console.log(`üìã Categor√≠as disponibles: ${categories.join(', ')}`);
        
        // Mapear espacios espec√≠ficamente
        if (categories.includes('IFCSPACE')) {
          const spaceItems = await model.getItemsOfCategory('IFCSPACE');
          console.log(`üè† Encontrados ${spaceItems.length} espacios en modelo ${model.modelId}`);
          
          const spaceLocalIds = (await Promise.all(
            spaceItems.map(async (item, index) => {
              try {
                const localId = await item.getLocalId();
                if (localId === null) {
                  console.warn(`‚ö†Ô∏è Espacio ${index} sin LocalID v√°lido`);
                }
                return localId;
              } catch (error) {
                console.warn(`‚ö†Ô∏è Error obteniendo LocalID del espacio ${index}:`, error);
                return null;
              }
            })
          )).filter(id => id !== null) as number[];
          
          if (spaceLocalIds.length > 0) {
            this.spaceElements.set(model.modelId, {
              model,
              localIds: spaceLocalIds
            });
            totalSpacesMapped += spaceLocalIds.length;
            console.log(`‚úÖ Modelo ${model.modelId}: ${spaceLocalIds.length} espacios mapeados correctamente`);
          } else {
            console.warn(`‚ö†Ô∏è Modelo ${model.modelId}: No se pudieron mapear espacios (LocalIDs inv√°lidos)`);
          }
        } else {
          console.log(`‚ÑπÔ∏è Modelo ${model.modelId}: No contiene espacios (IFCSPACE)`);
        }
        
      } catch (error) {
        console.error(`‚ùå Error cr√≠tico mapeando modelo ${model.modelId}:`, error);
      }
    }
    
    console.log(`‚úÖ === MAPAS DE ELEMENTOS CONSTRUIDOS ===`);
    console.log(`üèóÔ∏è Modelos procesados: ${this.fragments.models.list.size}`);
    console.log(`üè† Modelos con espacios: ${this.spaceElements.size}`);
    console.log(`üìä Total espacios mapeados: ${totalSpacesMapped}`);
  }

  /**
   * üî• MEJORADO: Aislar espacios ocultando TODAS las categor√≠as IFC excepto IFCSPACE
   */
  private async isolateSpaces(): Promise<void> {
  if (!this.fragments || !this.config.isolateSpaces) return;
  
  console.log('üîí === AISLANDO SOLO HABITACIONES ===');
  this.hiddenElements.clear();
  
  const categoriesToHide = IFC_CATEGORIES.filter(cat => cat !== 'IFCSPACE');
  let totalHiddenElements = 0;
  
  for (const model of this.fragments.models.list.values()) {
    try {
      console.log(`üèóÔ∏è Procesando modelo: ${model.modelId}`);
      const availableCategories = await model.getCategories();
      
      // 1. Ocultar todas las categor√≠as excepto IFCSPACE
      for (const category of availableCategories) {
        if (categoriesToHide.includes(category)) {
          try {
            const items = await model.getItemsOfCategory(category);
            const localIds = (await Promise.all(
              items.map(item => item.getLocalId())
            )).filter(id => id !== null) as number[];
            
            if (localIds.length > 0) {
              await model.setVisible(localIds, false);
              
              const key = `${model.modelId}_${category}`;
              this.hiddenElements.set(key, {
                model,
                localIds,
                category
              });
              
              totalHiddenElements += localIds.length;
              console.log(`ü´• Ocultados ${localIds.length} elementos de ${category}`);
            }
          } catch (categoryError) {
            console.warn(`‚ö†Ô∏è Error procesando categor√≠a ${category}:`, categoryError);
          }
        }
      }
      
      // 2. Para IFCSPACE: Mostrar solo habitaciones, ocultar √°reas
      if (availableCategories.includes('IFCSPACE')) {
        try {
          // Obtener TODOS los espacios primero
          const allSpaces = await model.getItemsOfCategory('IFCSPACE');
          const allSpaceIds = (await Promise.all(
            allSpaces.map(item => item.getLocalId())
          )).filter(id => id !== null) as number[];
          
          // Ocultar TODOS los espacios primero
          if (allSpaceIds.length > 0) {
            await model.setVisible(allSpaceIds, false);
          }
          
          // Luego mostrar SOLO las habitaciones filtradas
          const filteredSpaces = await this.getFilteredSpaces(model);
          const roomIds = filteredSpaces.map(space => space.localId);
          
          if (roomIds.length > 0) {
            await model.setVisible(roomIds, true);
            console.log(`üëÅÔ∏è Mostradas ${roomIds.length} habitaciones en modelo ${model.modelId}`);
          }
          
          console.log(`üè† Total espacios: ${allSpaceIds.length}, Habitaciones mostradas: ${roomIds.length}, √Åreas ocultas: ${allSpaceIds.length - roomIds.length}`);
          
        } catch (spaceError) {
          console.warn(`‚ö†Ô∏è Error procesando espacios:`, spaceError);
        }
      }
      
    } catch (modelError) {
      console.warn(`‚ö†Ô∏è Error procesando modelo ${model.modelId}:`, modelError);
    }
  }
  
  await this.fragments.update(true);
  
  console.log(`‚úÖ === AISLAMIENTO COMPLETADO ===`);
  console.log(`ü´• Total elementos ocultos: ${totalHiddenElements}`);
  console.log(`üè† Solo habitaciones visibles (√°reas ocultas)`);
}

  /**
   * üî• NUEVO: Restaurar visibilidad de elementos ocultos
   */
  private async restoreElementsVisibility(): Promise<void> {
    if (!this.fragments || this.hiddenElements.size === 0) return;
    
    console.log('üîì === RESTAURANDO VISIBILIDAD DE ELEMENTOS ===');
    
    for (const [key, elementInfo] of this.hiddenElements.entries()) {
      try {
        await elementInfo.model.setVisible(elementInfo.localIds, true);
        console.log(`üëÅÔ∏è Restaurados ${elementInfo.localIds.length} elementos de ${elementInfo.category}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error restaurando visibilidad de ${key}:`, error);
      }
    }
    
    this.hiddenElements.clear();
    await this.fragments.update(true);
    
    console.log('‚úÖ Visibilidad de elementos restaurada');
  }

  /**
   * üî• NUEVO: Ocultar espacios espec√≠ficamente al desactivar el mapa de calor
   */
  private async hideSpacesOnDeactivation(): Promise<void> {
    if (!this.fragments) return;
    
    console.log('ü´• === OCULTANDO ESPACIOS AL DESACTIVAR MAPA DE CALOR ===');
    
    let totalSpacesHidden = 0;
    
    for (const model of this.fragments.models.list.values()) {
      try {
        const categories = await model.getCategories();
        if (!categories.includes('IFCSPACE')) continue;
        
        const spaceItems = await model.getItemsOfCategory('IFCSPACE');
        
        if (spaceItems.length === 0) {
          console.log(`‚ö†Ô∏è No hay espacios en modelo ${model.modelId}`);
          continue;
        }
        
        const spaceLocalIds = (await Promise.all(
          spaceItems.map(item => item.getLocalId())
        )).filter(id => id !== null) as number[];
        
        if (spaceLocalIds.length > 0) {
          // Ocultar espacios
          await model.setVisible(spaceLocalIds, false);
          totalSpacesHidden += spaceLocalIds.length;
          console.log(`ü´• Ocultados ${spaceLocalIds.length} espacios en modelo ${model.modelId}`);
        }
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error ocultando espacios en modelo ${model.modelId}:`, error);
      }
    }
    
    // Forzar actualizaci√≥n de la visualizaci√≥n
    await this.fragments.update(true);
    
    console.log(`‚úÖ === ESPACIOS OCULTOS AL DESACTIVAR ===`);
    console.log(`ü´• Total espacios ocultos: ${totalSpacesHidden}`);
    console.log(`üëÅÔ∏è Todas las dem√°s categor√≠as permanecen visibles`);
  }

  /**
   * ‚ùå CORREGIDO: SOLO almacenar datos, NO procesarlos autom√°ticamente
   */
  updateHeatMapData(data: HeatMapData[]): void {
    console.log(`üìä === ALMACENANDO DATOS (SIN PROCESAR): ${data.length} espacios ===`);
    
    // SOLO ALMACENAR - No procesar autom√°ticamente
    this.pendingData.push(...data);
    
    // Limpiar duplicados
    const uniqueData = this.pendingData.reduce((acc, current) => {
      const existing = acc.find(item => item.spaceGuid === current.spaceGuid);
      if (!existing) {
        acc.push(current);
      } else {
        const currentTime = new Date(current.timestamp).getTime();
        const existingTime = new Date(existing.timestamp).getTime();
        if (currentTime > existingTime) {
          const index = acc.indexOf(existing);
          acc[index] = current;
        }
      }
      return acc;
    }, [] as HeatMapData[]);
    
    this.pendingData = uniqueData;
    
    // Actualizar almacenamiento interno
    this.heatMapData.clear();
    uniqueData.forEach(item => {
      this.heatMapData.set(item.spaceGuid, item);
    });
    
    console.log(`üì¶ Datos almacenados. Total disponible: ${this.pendingData.length}`);
    console.log(`‚ö†Ô∏è MAPA DE CALOR NO ACTIVADO - Use el bot√≥n del panel para activar`);
    
    // Disparar evento de datos actualizados
    window.dispatchEvent(new CustomEvent('heatMapDataUpdated', { 
      detail: { data: uniqueData } 
    }));
  }

  /**
   * üî• MODIFICADO: Solo procesar cuando se llame expl√≠citamente
   */
  private async processBatchData(): Promise<void> {
    if (this.isProcessing || this.pendingData.length === 0) return;
    
    // ‚ùå VERIFICAR QUE EL MAPA EST√â ACTIVO
    if (!this.isActive) {
      console.log(`‚ö†Ô∏è === DATOS LISTOS PERO MAPA INACTIVO ===`);
      console.log(`üìä ${this.pendingData.length} espacios con datos esperando activaci√≥n`);
      console.log(`üéõÔ∏è Use el bot√≥n 'Activar Mapa de Calor' en el panel de control`);
      return;
    }
    
    this.isProcessing = true;
    console.log(`üéØ === PROCESANDO BATCH DE ${this.pendingData.length} ESPACIOS ===`);
    
    try {
      const uniqueData = [...this.pendingData]; // Ya est√°n limpios desde updateHeatMapData
      
      console.log(`üßπ Procesando ${uniqueData.length} espacios √∫nicos`);
      
      // üî• APLICAR COLORES SOLO SI EST√Å ACTIVO
      await this.applyColorsWithImprovedRange(uniqueData);
      
      console.log(`‚úÖ === BATCH PROCESADO EXITOSAMENTE: ${uniqueData.length} espacios ===`);
      
    } catch (error) {
      console.error('‚ùå Error procesando batch de HeatMap:', error);
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * üî• CORREGIDO: Aplicar colores con rango de temperatura corregido
   */
  private async applyColorsWithImprovedRange(heatMapData: HeatMapData[]): Promise<void> {
  if (!this.fragments || heatMapData.length === 0 || !this.isActive) {
    console.log('‚ö†Ô∏è No aplicando colores - HeatMap inactivo o sin datos');
    return;
  }
  
  console.log(`üé® === APLICANDO COLORES SOLO A HABITACIONES ===`);
  
  await this.clearAllHighlights();
  
  let spacesColored = 0;
  
  for (const model of this.fragments.models.list.values()) {
    try {
      // üî• USAR FUNCI√ìN FILTRADA en lugar de getItemsOfCategory
      const filteredSpaces = await this.getFilteredSpaces(model);
      
      console.log(`üéØ Procesando ${filteredSpaces.length} habitaciones en modelo ${model.modelId}`);
      
      for (const space of filteredSpaces) {
        try {
          const sensorData = heatMapData.find(data => 
            data.spaceGuid === space.guid ||
            data.spaceGuid.includes(space.guid.substring(0, 8)) ||
            space.guid.includes(data.spaceGuid.substring(0, 8))
          );
          
          if (sensorData) {
            console.log(`üéØ Coloreando habitaci√≥n: ${space.name} (${sensorData.temperature.toFixed(1)}¬∞C)`);
            
            const color = this.getTemperatureColorCorrected(sensorData.temperature);
            
            await model.highlight([space.localId], {
              color: color,
              opacity: this.config.opacity,
              renderedFaces: FRAGS.RenderedFaces.TWO,
              transparent: true
            });
            
            this.activeSpaceHighlights.set(space.guid, {
              model,
              localIds: [space.localId]
            });
            
            spacesColored++;
          }
          
        } catch (spaceError) {
          console.warn(`‚ö†Ô∏è Error procesando habitaci√≥n:`, spaceError);
        }
      }
      
    } catch (modelError) {
      console.warn(`‚ö†Ô∏è Error procesando modelo ${model.modelId}:`, modelError);
    }
  }
  
  console.log('üîÑ === ACTUALIZANDO VISUALIZACI√ìN ===');
  await this.fragments.update(true);
  
  console.log(`‚úÖ === HEATMAP APLICADO SOLO A HABITACIONES ===`);
  console.log(`üé® Habitaciones coloreadas: ${spacesColored}`);
  console.log(`üìä Total datos recibidos: ${heatMapData.length}`);
}

  /**
   * üî• CORREGIDO: Sistema de colores de temperatura usando configuraci√≥n
   */
  private getTemperatureColorCorrected(temperature: number): THREE.Color {
    const { min, max, optimal } = this.config.temperatureRange;
    
    console.log(`üé® Calculando color para ${temperature}¬∞C (rango: ${min}-${max}¬∞C, √≥ptimo: ${optimal.min}-${optimal.max}¬∞C)`);
    
    // Normalizar temperatura en el rango configurado
    let normalizedTemp: number;
    
    if (temperature <= min) {
      normalizedTemp = 0; // Muy fr√≠o
    } else if (temperature >= max) {
      normalizedTemp = 1; // Muy caliente
    } else {
      normalizedTemp = (temperature - min) / (max - min);
    }
    
    console.log(`üî¢ Temperatura normalizada: ${normalizedTemp.toFixed(3)}`);
    
    let color: THREE.Color;
    
    // Zona muy fr√≠a (por debajo del m√≠nimo o en el primer rango)
    if (temperature < optimal.min && normalizedTemp < 0.3) {
      color = new THREE.Color(this.config.colorScheme.cold); // Azul fr√≠o
      console.log(`‚ùÑÔ∏è Zona fr√≠a: ${this.config.colorScheme.cold}`);
    }
    // Zona fresca (acerc√°ndose al √≥ptimo desde abajo)
    else if (temperature < optimal.min) {
      color = new THREE.Color(this.config.colorScheme.cool); // Azul claro
      console.log(`üßä Zona fresca: ${this.config.colorScheme.cool}`);
    }
    // Zona √≥ptima (confort)
    else if (temperature >= optimal.min && temperature <= optimal.max) {
      color = new THREE.Color(this.config.colorScheme.optimal); // Verde
      console.log(`‚úÖ Zona √≥ptima: ${this.config.colorScheme.optimal}`);
    }
    // Zona c√°lida (por encima del √≥ptimo pero no extrema)
    else if (temperature > optimal.max && normalizedTemp < 0.8) {
      color = new THREE.Color(this.config.colorScheme.warm); // Naranja
      console.log(`üî• Zona c√°lida: ${this.config.colorScheme.warm}`);
    }
    // Zona muy caliente (extrema)
    else {
      color = new THREE.Color(this.config.colorScheme.hot); // Rojo
      console.log(`üå°Ô∏è Zona muy caliente: ${this.config.colorScheme.hot}`);
    }
    
    return color;
  }

  /**
   * üî• NUEVO: Verificar estado completo del aislamiento
   */
  public async verifyIsolationState(): Promise<void> {
    if (!this.fragments) {
      console.log('‚ùå No hay fragments inicializados');
      return;
    }
    
    console.log('üîç === VERIFICANDO ESTADO DE AISLAMIENTO ===');
    
    for (const model of this.fragments.models.list.values()) {
      try {
        console.log(`\nüèóÔ∏è MODELO: ${model.modelId}`);
        const categories = await model.getCategories();
        
        for (const category of categories) {
          try {
            const items = await model.getItemsOfCategory(category);
            if (items.length === 0) continue;
            
            const localIds = (await Promise.all(
              items.map(item => item.getLocalId())
            )).filter(id => id !== null) as number[];
            
            if (localIds.length === 0) continue;
            
            // Verificar visibilidad del primer elemento como muestra
            const isVisible = await model.isVisible(localIds[0]);
            const statusIcon = isVisible ? 'üëÅÔ∏è' : 'ü´•';
            const expectedStatus = category === 'IFCSPACE' ? 'VISIBLE' : 'OCULTO';
            const actualStatus = isVisible ? 'VISIBLE' : 'OCULTO';
            const isCorrect = (category === 'IFCSPACE' && isVisible) || (category !== 'IFCSPACE' && !isVisible);
            const resultIcon = isCorrect ? '‚úÖ' : '‚ùå';
            
            console.log(`  ${statusIcon} ${category}: ${localIds.length} elementos - ${actualStatus} (esperado: ${expectedStatus}) ${resultIcon}`);
            
          } catch (error) {
            console.warn(`  ‚ö†Ô∏è Error verificando ${category}:`, error);
          }
        }
        
      } catch (error) {
        console.error(`‚ùå Error verificando modelo ${model.modelId}:`, error);
      }
    }
    
    console.log(`\nüìä RESUMEN DE AISLAMIENTO:`);
    console.log(`üîí Aislamiento configurado: ${this.config.isolateSpaces ? 'S√ç' : 'NO'}`);
    console.log(`üå°Ô∏è HeatMap activo: ${this.isActive ? 'S√ç' : 'NO'}`);
    console.log(`ü´• Elementos ocultos: ${this.hiddenElements.size} categor√≠as`);
    console.log(`üè† Espacios mapeados: ${this.spaceElements.size} modelos`);
    console.log(`üìç Centros calculados: ${this.spaceCentersMap.size} espacios`);
  }

  /**
   * ‚úÖ ACTIVAR CON AISLAMIENTO - SOLO SE EJECUTA MANUALMENTE
   */
  async activateHeatMap(): Promise<void> {
    if (!this.world || !this.fragments || this.isActive) {
      console.log('‚ö†Ô∏è Ya est√° activo o no est√° inicializado');
      return;
    }
    
    console.log('üå°Ô∏è === ACTIVANDO MAPA DE CALOR MANUALMENTE ===');
    this.isActive = true;
    
    // Reconstruir mapas por si acaso
    await this.buildGuidToLocalIdMap();
    await this.buildElementMaps();
    await this.buildSpaceCentersMap();
    
    // üî• AISLAR ESPACIOS SI EST√Å CONFIGURADO
    if (this.config.isolateSpaces) {
      await this.isolateSpaces();
    }
    
    // ‚úÖ PROCESAR DATOS PENDIENTES SI LOS HAY
    if (this.pendingData.length > 0) {
      console.log(`üìä Procesando ${this.pendingData.length} datos pendientes...`);
      await this.processBatchData();
    }
    
    this.startUpdateTimer();
    
    console.log('‚úÖ === MAPA DE CALOR ACTIVADO EXITOSAMENTE ===');
    console.log(`üå°Ô∏è Estado: ACTIVO`);
    console.log(`üìä Datos disponibles: ${this.heatMapData.size}`);
    console.log(`üîí Aislamiento: ${this.config.isolateSpaces ? 'ACTIVO' : 'INACTIVO'}`);
  }

  /**
   * ‚úÖ DESACTIVAR CON RESTAURACI√ìN Y OCULTAMIENTO DE ESPACIOS
   */
  async deactivateHeatMap(): Promise<void> {
    if (!this.isActive) {
      console.log('‚ö†Ô∏è HeatMap ya est√° desactivado');
      return;
    }
    
    console.log('üå°Ô∏è === DESACTIVANDO MAPA DE CALOR Y RESTAURANDO ===');
    this.isActive = false;
    
    this.stopUpdateTimer();
    
    if (this.batchTimeout) {
      clearTimeout(this.batchTimeout);
      this.batchTimeout = null;
    }
    
    await this.clearAllHighlights();
    
    // üî• RESTAURAR VISIBILIDAD DE ELEMENTOS (excepto IFCSPACE)
    await this.restoreElementsVisibility();
    
    // üî• NUEVO: OCULTAR ESPEC√çFICAMENTE LOS ESPACIOS (IFCSPACE)
    await this.hideSpacesOnDeactivation();
    
    console.log('‚úÖ === MAPA DE CALOR DESACTIVADO, ELEMENTOS RESTAURADOS Y ESPACIOS OCULTOS ===');
    console.log(`üå°Ô∏è Estado: INACTIVO`);
    console.log(`üìä Datos conservados: ${this.heatMapData.size} (para pr√≥xima activaci√≥n)`);
  }

  // === M√âTODOS P√öBLICOS CORREGIDOS ===

  /**
   * ‚úÖ FORZAR PROCESAMIENTO MANUAL DE BATCH
   */
  async forceProcessBatch(): Promise<void> {
    if (!this.isActive) {
      console.log('‚ö†Ô∏è HeatMap debe estar activo para procesar datos');
      return;
    }
    
    if (this.batchTimeout) {
      clearTimeout(this.batchTimeout);
      this.batchTimeout = null;
    }
    await this.processBatchData();
  }

  /**
   * ‚úÖ LIMPIAR HEATMAP MANUALMENTE
   */
  async clearHeatMap(): Promise<void> {
    if (!this.fragments) return;
    
    console.log('üßπ === LIMPIANDO HEATMAP ===');
    
    for (const model of this.fragments.models.list.values()) {
      try {
        const categories = await model.getCategories();
        if (!categories.includes('IFCSPACE')) continue;
        
        const spaceItems = await model.getItemsOfCategory('IFCSPACE');
        const localIds = (await Promise.all(
          spaceItems.map(item => item.getLocalId())
        )).filter(id => id !== null) as number[];
        
        if (localIds.length > 0) {
          await model.resetHighlight(localIds);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error limpiando modelo ${model.modelId}:`, error);
      }
    }
    
    await this.fragments.update(true);
    this.heatMapData.clear();
    this.pendingData = [];
    this.activeSpaceHighlights.clear();
    
    console.log('‚úÖ HeatMap limpiado');
  }

  private async clearAllHighlights(): Promise<void> {
    if (!this.fragments || this.activeSpaceHighlights.size === 0) return;
    
    console.log(`üßπ Limpiando ${this.activeSpaceHighlights.size} highlights activos...`);
    
    for (const [key, highlightInfo] of this.activeSpaceHighlights.entries()) {
      try {
        await highlightInfo.model.resetHighlight(highlightInfo.localIds);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error limpiando highlight ${key}:`, error);
      }
    }
    
    this.activeSpaceHighlights.clear();
  }

  /**
   * ‚ùå TIMER MODIFICADO: Solo actualiza si est√° activo
   */
  private startUpdateTimer(): void {
    if (this.updateTimer) return;
    
    this.updateTimer = window.setInterval(() => {
      if (this.isActive && this.heatMapData.size > 0) {
        console.log('üîÑ Actualizaci√≥n autom√°tica del heatmap (solo si est√° activo)...');
        const currentData = Array.from(this.heatMapData.values());
        this.applyColorsWithImprovedRange(currentData);
      }
    }, this.config.updateInterval);
  }

  private stopUpdateTimer(): void {
    if (this.updateTimer) {
      clearInterval(this.updateTimer);
      this.updateTimer = null;
    }
  }

  // === M√âTODOS DE CONFIGURACI√ìN ACTUALIZADOS ===

  configure(newConfig: Partial<HeatMapVisualizationConfig>): void {
    const oldIsolateSpaces = this.config.isolateSpaces;
    this.config = { ...this.config, ...newConfig };
    
    // Solo aplicar cambios si est√° activo
    if (this.isActive && oldIsolateSpaces !== this.config.isolateSpaces) {
      if (this.config.isolateSpaces) {
        this.isolateSpaces();
      } else {
        this.restoreElementsVisibility();
      }
    }
    
    // Solo aplicar visualizaci√≥n si est√° activo
    if (this.isActive && this.heatMapData.size > 0) {
      const currentData = Array.from(this.heatMapData.values());
      this.applyColorsWithImprovedRange(currentData);
    }
    
    console.log('üîß Configuraci√≥n del heatmap actualizada:', newConfig);
  }

  public debugCorrespondences(): void {
    console.log('üîç === DEBUG: HEATMAP CON CONTROL MANUAL ===');
    
    console.log('\nüìã ESTADO GENERAL:');
    console.log(`üå°Ô∏è HeatMap activo: ${this.isActive ? 'S√ç' : 'NO'}`);
    console.log(`üîí Aislamiento configurado: ${this.config.isolateSpaces ? 'S√ç' : 'NO'}`);
    console.log(`üìä Datos almacenados: ${this.heatMapData.size}`);
    console.log(`üì¶ Datos pendientes: ${this.pendingData.length}`);
    console.log(`‚öôÔ∏è Procesando: ${this.isProcessing ? 'S√ç' : 'NO'}`);
    
    console.log('\nüìã MAPA DE CORRESPONDENCIAS:');
    this.guidToLocalIdMap.forEach((mapping, guid) => {
      console.log(`${guid.slice(-8)}... ‚Üí Model: ${mapping.model.modelId}, LocalID: ${mapping.localId}`);
    });
    
    console.log('\nüìã DATOS DE CALOR:');
    this.heatMapData.forEach((data, guid) => {
      const hasMapping = this.guidToLocalIdMap.has(guid);
      const hasCenter = this.spaceCentersMap.has(guid);
      console.log(`${guid.slice(-8)}... ‚Üí ${data.spaceName} (${data.temperature}¬∞C) [Mapping: ${hasMapping ? '‚úÖ' : '‚ùå'}] [Centro: ${hasCenter ? '‚úÖ' : '‚ùå'}]`);
    });
    
    console.log('\nüìç CENTROS DE ESPACIOS:');
    this.spaceCentersMap.forEach((center, guid) => {
      console.log(`${guid.slice(-8)}... ‚Üí (${center.x.toFixed(2)}, ${center.y.toFixed(2)}, ${center.z.toFixed(2)})`);
    });
    
    console.log('\nüè† ELEMENTOS DE ESPACIOS:');
    this.spaceElements.forEach((elements, modelId) => {
      console.log(`Modelo ${modelId}: ${elements.localIds.length} espacios`);
    });
    
    console.log('\nü´• ELEMENTOS OCULTOS:');
    this.hiddenElements.forEach((elements, key) => {
      console.log(`${key}: ${elements.localIds.length} elementos de ${elements.category}`);
    });
    
    console.log('\nüìä ESTAD√çSTICAS:');
    console.log(`üó∫Ô∏è Correspondencias: ${this.guidToLocalIdMap.size}`);
    console.log(`üå°Ô∏è Datos de calor: ${this.heatMapData.size}`);
    console.log(`üìç Centros calculados: ${this.spaceCentersMap.size}`);
    console.log(`üé® Highlights activos: ${this.activeSpaceHighlights.size}`);
    console.log(`üì¶ Datos pendientes: ${this.pendingData.length}`);
    console.log(`üîí Elementos ocultos: ${this.hiddenElements.size}`);
    
    if (!this.isActive && this.heatMapData.size > 0) {
      console.log('\n‚ö†Ô∏è AVISO: Hay datos disponibles pero el HeatMap est√° INACTIVO');
      console.log('üéõÔ∏è Use activateHeatMap() para activar la visualizaci√≥n');
    }
  }

  public async rebuildCorrespondenceMap(): Promise<void> {
    console.log('üîÑ Reconstruyendo mapas de correspondencia y centros...');
    await this.buildGuidToLocalIdMap();
    await this.buildElementMaps();
    await this.buildSpaceCentersMap();
    
    // Solo aplicar visualizaci√≥n si est√° activo
    if (this.isActive && this.heatMapData.size > 0) {
      const currentData = Array.from(this.heatMapData.values());
      await this.applyColorsWithImprovedRange(currentData);
    }
    console.log('‚úÖ Mapas y centros reconstruidos');
  }

  // === M√âTODOS P√öBLICOS PARA CONTROL DE AISLAMIENTO ===

  /**
   * üî• TOGGLE AISLAMIENTO - Solo afecta si est√° activo
   */
  public async toggleSpaceIsolation(): Promise<void> {
    this.config.isolateSpaces = !this.config.isolateSpaces;
    
    if (this.isActive) {
      if (this.config.isolateSpaces) {
        await this.isolateSpaces();
      } else {
        await this.restoreElementsVisibility();
      }
    }
    
    console.log(`üîí Aislamiento de espacios: ${this.config.isolateSpaces ? 'ACTIVADO' : 'DESACTIVADO'}`);
    if (!this.isActive) {
      console.log('‚ÑπÔ∏è Cambio se aplicar√° cuando se active el HeatMap');
    }
  }

  /**
   * üî• FORZAR AISLAMIENTO - Solo si est√° activo
   */
  public async forceIsolateSpaces(): Promise<void> {
    if (this.isActive) {
      await this.isolateSpaces();
    } else {
      console.log('‚ö†Ô∏è HeatMap debe estar activo para forzar aislamiento');
    }
  }

  /**
   * üî• FORZAR RESTAURACI√ìN
   */
  public async forceRestoreElements(): Promise<void> {
    await this.restoreElementsVisibility();
  }

  /**
   * üî• NUEVO: Forzar ocultamiento de espacios (m√©todo p√∫blico)
   */
  public async forceHideSpacesMethod(): Promise<void> {
    await this.hideSpacesOnDeactivation();
  }

  // === GETTERS Y UTILIDADES ACTUALIZADOS ===

  getCurrentData(): HeatMapData[] {
    return Array.from(this.heatMapData.values());
  }

  getSpaceData(spaceGuid: string): HeatMapData | null {
    return this.heatMapData.get(spaceGuid) || null;
  }

  getSpaceTemperature(spaceGuid: string): number | null {
    const data = this.heatMapData.get(spaceGuid);
    return data?.temperature || null;
  }

  dispose(): void {
    console.log('üßπ Disposing HeatMapVisualization...');
    
    this.deactivateHeatMap();
    
    this.heatMapData.clear();
    this.activeSpaceHighlights.clear();
    this.guidToLocalIdMap.clear();
    this.spaceCentersMap.clear();
    this.hiddenElements.clear();
    this.spaceElements.clear();
    this.pendingData = [];
    
    console.log('üî• HeatMapVisualization disposed completamente');
  }

  // === GETTERS DE ESTADO ACTUALIZADOS ===

  get isActiveMap(): boolean {
    return this.isActive;
  }

  get hasData(): boolean {
    return this.heatMapData.size > 0;
  }

  get dataCount(): number {
    return this.heatMapData.size;
  }

  get isInitialized(): boolean {
    return this.world !== null && this.fragments !== null;
  }

  get correspondenceMapSize(): number {
    return this.guidToLocalIdMap.size;
  }

  get activeHighlightsCount(): number {
    return this.activeSpaceHighlights.size;
  }

  get pendingDataCount(): number {
    return this.pendingData.length;
  }

  get hiddenElementsCount(): number {
    return this.hiddenElements.size;
  }

  get isSpaceIsolationActive(): boolean {
    return this.config.isolateSpaces && this.isActive;
  }

  get spaceCentersCount(): number {
    return this.spaceCentersMap.size;
  }

  get hasSpaceCenters(): boolean {
    return this.spaceCentersMap.size > 0;
  }

  get isReadyForActivation(): boolean {
    return this.isInitialized && this.guidToLocalIdMap.size > 0 && !this.isActive;
  }

  get hasDataWaitingForActivation(): boolean {
    return !this.isActive && this.heatMapData.size > 0;
  }
}

// Exportar instancia singleton
export const heatMapVisualization = new HeatMapVisualizationService();

// ‚≠ê FUNCIONES DE DEBUG GLOBALES ACTUALIZADAS
(window as any).debugHeatMapCorrespondences = () => {
  if (heatMapVisualization.debugCorrespondences) {
    heatMapVisualization.debugCorrespondences();
  } else {
    console.error('‚ùå Funci√≥n de debug no disponible');
  }
};

(window as any).rebuildHeatMapCorrespondences = async () => {
  if (heatMapVisualization.rebuildCorrespondenceMap) {
    await heatMapVisualization.rebuildCorrespondenceMap();
  } else {
    console.error('‚ùå Funci√≥n de reconstrucci√≥n no disponible');
  }
};

(window as any).forceHeatMapBatch = async () => {
  if (heatMapVisualization.forceProcessBatch) {
    await heatMapVisualization.forceProcessBatch();
  } else {
    console.error('‚ùå Funci√≥n de forzar batch no disponible');
  }
};

(window as any).toggleSpaceIsolation = async () => {
  if (heatMapVisualization.toggleSpaceIsolation) {
    await heatMapVisualization.toggleSpaceIsolation();
  } else {
    console.error('‚ùå Funci√≥n de toggle aislamiento no disponible');
  }
};

(window as any).forceIsolateSpaces = async () => {
  if (heatMapVisualization.forceIsolateSpaces) {
    await heatMapVisualization.forceIsolateSpaces();
  } else {
    console.error('‚ùå Funci√≥n de forzar aislamiento no disponible');
  }
};

(window as any).forceRestoreElements = async () => {
  if (heatMapVisualization.forceRestoreElements) {
    await heatMapVisualization.forceRestoreElements();
  } else {
    console.error('‚ùå Funci√≥n de restaurar elementos no disponible');
  }
};

(window as any).verifyIsolationState = async () => {
  if (heatMapVisualization.verifyIsolationState) {
    await heatMapVisualization.verifyIsolationState();
  } else {
    console.error('‚ùå Funci√≥n de verificaci√≥n no disponible');
  }
};

// ‚úÖ NUEVAS FUNCIONES DE CONTROL MANUAL
(window as any).activateHeatMap = async () => {
  await heatMapVisualization.activateHeatMap();
};

(window as any).deactivateHeatMap = async () => {
  await heatMapVisualization.deactivateHeatMap();
};

(window as any).checkHeatMapStatus = () => {
  console.log('üîç === ESTADO DEL HEATMAP ===');
  console.log(`üå°Ô∏è Activo: ${heatMapVisualization.isActiveMap ? 'S√ç' : 'NO'}`);
  console.log(`üìä Datos: ${heatMapVisualization.dataCount}`);
  console.log(`üì¶ Pendientes: ${heatMapVisualization.pendingDataCount}`);
  console.log(`üîí Aislamiento: ${heatMapVisualization.isSpaceIsolationActive ? 'ACTIVO' : 'INACTIVO'}`);
  console.log(`‚úÖ Listo para activar: ${heatMapVisualization.isReadyForActivation ? 'S√ç' : 'NO'}`);
  console.log(`‚è≥ Datos esperando: ${heatMapVisualization.hasDataWaitingForActivation ? 'S√ç' : 'NO'}`);
};

// üî• NUEVA FUNCI√ìN: Forzar ocultamiento de espacios
(window as any).forceHideSpaces = async () => {
  if (heatMapVisualization.forceHideSpacesMethod) {
    await heatMapVisualization.forceHideSpacesMethod();
  } else {
    console.error('‚ùå Funci√≥n de forzar ocultamiento de espacios no disponible');
  }
};

export default heatMapVisualization;